/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compiler = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,40],$V2=[1,8],$V3=[1,10],$V4=[1,11],$V5=[1,70],$V6=[1,34],$V7=[1,73],$V8=[1,35],$V9=[1,32],$Va=[1,47],$Vb=[1,48],$Vc=[1,49],$Vd=[1,74],$Ve=[1,50],$Vf=[1,39],$Vg=[1,27],$Vh=[1,31],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,75],$Vm=[1,76],$Vn=[1,77],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,36],$VA=[1,37],$VB=[1,38],$VC=[1,68],$VD=[1,63],$VE=[1,44],$VF=[9,14,16,20,22,36,39,42,43,45,52,53,54,56,58,60,61,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,103,111,116],$VG=[5,14,20,22,36,39,42,43,45,46,52,53,54,56,58,60,61,63,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,103,111,116],$VH=[5,14,20,22,36,39,42,43,45,46,52,53,54,56,58,60,61,62,63,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,103,111,116],$VI=[1,89],$VJ=[1,90],$VK=[1,103],$VL=[1,105],$VM=[1,104],$VN=[1,110],$VO=[1,111],$VP=[1,113],$VQ=[1,121],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[2,108],$VV=[1,136],$VW=[1,135],$VX=[1,122],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,131],$V11=[1,125],$V21=[1,132],$V31=[1,133],$V41=[1,134],$V51=[10,12,21,42,110,111,113,114,119,120,121,126,127,128],$V61=[2,175],$V71=[1,137],$V81=[1,138],$V91=[1,139],$Va1=[21,37],$Vb1=[1,144],$Vc1=[21,37,119,120],$Vd1=[2,198],$Ve1=[1,146],$Vf1=[2,205],$Vg1=[1,148],$Vh1=[1,149],$Vi1=[14,35,37,42,75,93],$Vj1=[21,37,120],$Vk1=[1,163],$Vl1=[10,12,21,37,41,96,110,111,119,120,121,126,127,128],$Vm1=[1,167],$Vn1=[1,168],$Vo1=[1,169],$Vp1=[10,12,21,37,41,42,96,110,111,113,114,119,120,121,126,127,128],$Vq1=[2,167],$Vr1=[1,174],$Vs1=[2,177],$Vt1=[9,10,12,14,16,20,21,22,36,37,39,41,42,43,45,46,52,53,54,56,58,60,61,63,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,103,110,111,113,114,116,119,120,121,126,127,128],$Vu1=[2,84],$Vv1=[2,86],$Vw1=[1,181],$Vx1=[1,188],$Vy1=[21,41],$Vz1=[2,117],$VA1=[1,197],$VB1=[1,198],$VC1=[1,199],$VD1=[1,201],$VE1=[2,172],$VF1=[1,207],$VG1=[2,99],$VH1=[1,211],$VI1=[14,35,42,75,93],$VJ1=[2,100],$VK1=[2,101],$VL1=[14,37,42],$VM1=[1,223],$VN1=[2,213],$VO1=[1,228],$VP1=[14,36,42,56,73,74,75,103,111],$VQ1=[1,240],$VR1=[1,241],$VS1=[2,203],$VT1=[21,37,42,110,111,113,114,119,120],$VU1=[1,254],$VV1=[2,176],$VW1=[119,120],$VX1=[1,266],$VY1=[1,305],$VZ1=[14,37,42,75,93],$V_1=[42,110,111,113,114],$V$1=[2,143],$V02=[2,145],$V12=[2,182],$V22=[1,309],$V32=[1,313],$V42=[37,41],$V52=[10,12,21,37,119,120,121,126,127,128],$V62=[1,322],$V72=[2,191],$V82=[1,350],$V92=[2,119],$Va2=[14,46,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$Vb2=[41,46],$Vc2=[21,37,110,111,113,114,119,120],$Vd2=[2,202],$Ve2=[10,12,21,37,41,42,94,96,107,108,110,111,113,114,119,120,121,126,127,128],$Vf2=[2,204],$Vg2=[2,210],$Vh2=[1,399],$Vi2=[1,400],$Vj2=[1,424],$Vk2=[46,67,69],$Vl2=[1,481],$Vm2=[1,492],$Vn2=[1,496],$Vo2=[1,505],$Vp2=[1,507],$Vq2=[2,139];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"corpo":3,"program":4,"EOF":5,"preproc_directives":6,"statements_list":7,"preproc_directive":8,"INCLUDE":9,"LT":10,"STDIO_H":11,"GT":12,"STDLIB_H":13,"IDF":14,"DOT":15,"DEFINE":16,"valor_lit":17,"statement":18,"exp_stmt":19,"BREAK":20,";":21,"CONTINUE":22,"if_stmt":23,"loop_stmt":24,"switch_stmt":25,"statement_composto":26,"function_definition":27,"function_prototype":28,"return_stmt":29,"struct_decl":30,"union_decl":31,"enum_decl":32,"typedef_stmt":33,"tipo_var":34,"MAIN":35,"(":36,")":37,"parameter_list":38,"VOID":39,"parameter":40,",":41,"MUL":42,"RETURN":43,"expressao_aritmetica":44,"{":45,"}":46,"declaracao_variavel":47,"expressao_atribuicao":48,"expressao_condicional":49,"function_call":50,"argument_list":51,"MALLOC":52,"FREE":53,"SCANF":54,"string_lit":55,"BITAND":56,"FORMAT_D":57,"PRINTF":58,"STRING_LIT":59,"TYPEDEF":60,"IF":61,"ELSE":62,"SWITCH":63,"case_list":64,"cast_exp":65,"case_item":66,"CASE":67,":":68,"DEFAULT":69,"WHILE":70,"FOR":71,"DO":72,"INT_LIT":73,"F_LIT":74,"CHAR_LIT":75,"INT":76,"DOUBLE":77,"FLOAT":78,"CHAR":79,"UNSIGNED":80,"SIGNED":81,"LONG":82,"SHORT":83,"CONST":84,"VOLATILE":85,"REGISTER":86,"STRUCT":87,"UNION":88,"ENUM":89,"struct_init_list":90,"struct_init_item":91,"lista_ids":92,"QUOTE":93,"=":94,"[":95,"]":96,"array_init_list_2d":97,"array_init":98,"array_init_list":99,"malloc_exp":100,"acesso_array":101,"expressao_in_decrement":102,"SIZEOF":103,"fator":104,"INC":105,"DEC":106,"ADD_ASSIGN":107,"SUB_ASSIGN":108,"termo":109,"SUM":110,"SUB":111,"sizeof_exp":112,"DIV":113,"MOD":114,"expressao_or":115,"NOT":116,"expressao_primaria":117,"operador_relacional":118,"AND":119,"OR":120,"EQ":121,"expressao_and":122,"expressao_relacional_ou_termo":123,"expressao_relacional":124,"NULL":125,"LE":126,"GE":127,"NE":128,"struct_member_list":129,"struct_member":130,"enum_member_list":131,"enum_member":132,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"INCLUDE",10:"LT",11:"STDIO_H",12:"GT",13:"STDLIB_H",14:"IDF",15:"DOT",16:"DEFINE",20:"BREAK",21:";",22:"CONTINUE",35:"MAIN",36:"(",37:")",39:"VOID",41:",",42:"MUL",43:"RETURN",45:"{",46:"}",52:"MALLOC",53:"FREE",54:"SCANF",56:"BITAND",57:"FORMAT_D",58:"PRINTF",59:"STRING_LIT",60:"TYPEDEF",61:"IF",62:"ELSE",63:"SWITCH",67:"CASE",68:":",69:"DEFAULT",70:"WHILE",71:"FOR",72:"DO",73:"INT_LIT",74:"F_LIT",75:"CHAR_LIT",76:"INT",77:"DOUBLE",78:"FLOAT",79:"CHAR",80:"UNSIGNED",81:"SIGNED",82:"LONG",83:"SHORT",84:"CONST",85:"VOLATILE",86:"REGISTER",87:"STRUCT",88:"UNION",89:"ENUM",93:"QUOTE",94:"=",95:"[",96:"]",103:"SIZEOF",105:"INC",106:"DEC",107:"ADD_ASSIGN",108:"SUB_ASSIGN",110:"SUM",111:"SUB",113:"DIV",114:"MOD",116:"NOT",119:"AND",120:"OR",121:"EQ",125:"NULL",126:"LE",127:"GE",128:"NE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[8,4],[8,4],[8,6],[8,3],[8,2],[7,1],[7,2],[18,1],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[27,5],[27,6],[27,6],[27,6],[27,6],[27,5],[28,6],[28,5],[28,6],[28,5],[38,1],[38,3],[40,2],[40,3],[29,3],[29,2],[26,3],[26,2],[19,2],[19,2],[19,2],[19,2],[50,4],[50,3],[50,4],[50,4],[50,7],[50,7],[50,4],[50,6],[55,1],[51,1],[51,3],[33,4],[23,5],[23,5],[23,7],[23,7],[23,7],[23,7],[23,7],[23,7],[25,7],[25,7],[25,7],[64,1],[64,2],[66,3],[66,4],[66,2],[66,3],[24,5],[24,5],[24,7],[24,7],[24,7],[24,7],[17,1],[17,1],[17,1],[17,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,3],[34,1],[34,2],[34,3],[34,1],[34,1],[90,1],[90,3],[91,1],[91,1],[47,2],[47,3],[47,4],[47,7],[92,1],[92,1],[92,3],[92,3],[92,4],[92,7],[92,11],[92,4],[92,8],[92,8],[92,3],[92,5],[92,6],[92,6],[92,10],[92,10],[98,1],[98,3],[98,3],[98,3],[99,1],[99,3],[97,3],[97,5],[48,3],[48,3],[48,3],[48,5],[48,3],[48,3],[48,1],[48,5],[100,4],[100,9],[100,10],[65,4],[101,4],[101,7],[102,2],[102,2],[102,3],[102,3],[102,3],[102,3],[44,1],[44,3],[44,3],[44,1],[112,4],[112,5],[109,1],[109,3],[109,3],[109,3],[109,3],[104,1],[104,1],[104,3],[104,1],[104,2],[104,1],[104,2],[104,2],[104,1],[104,5],[104,3],[49,1],[49,2],[49,3],[49,6],[49,3],[49,3],[49,3],[49,3],[49,3],[49,6],[49,6],[115,1],[115,3],[122,1],[122,3],[123,1],[123,1],[123,3],[123,3],[123,4],[123,2],[123,4],[117,1],[117,4],[124,3],[124,4],[124,6],[124,4],[118,1],[118,1],[118,1],[118,1],[118,1],[118,1],[30,6],[30,7],[129,1],[129,2],[130,3],[130,6],[31,6],[31,7],[32,6],[32,7],[131,1],[131,3],[132,1],[132,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Análise Sintática concluída com sucesso!\n");

        // Exibindo a Tabela de Símbolos
        console.log('Tabela de símbolos:\n', tabelaSimbolos);
        
        // Verificação de erros semânticos
        console.log('Análise Semântica\n');
        if (erros.length > 0) {
            console.log('Erros semânticos encontrados:\n', erros);
        } else {
            console.log('Sem erros semânticos encontrados.\n');
            
            // Se não houver erros, gera o código TAC
            console.log('Códigos Three Address Code (TAC) gerados:\n');
            printaTAC();
            console.log('');
        }

        // Gerando ASTs
        console.log('ASTs geradas: \n');
        arvores.forEach(arvore => {
            printPosOrder(arvore.root, 1);
        });
    
break;
case 2: case 3: case 11:

        arvores.push(new AST($$[$0].node));
    
break;
case 4: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 37: case 72: case 219: case 227:
 this.$ = { node: $$[$0].node }; 
break;
case 5:
 this.$ = { node: new Node('PREPROC_DIRECTIVES', $$[$0-1].node, $$[$0].node) }; 
break;
case 6:
 this.$ = { node: new Node('INCLUDE', new Node('STDIO_H')) }; 
break;
case 7:
 this.$ = { node: new Node('INCLUDE', new Node('STDLIB_H')) }; 
break;
case 8:
 this.$ = { node: new Node('INCLUDE', new Node($$[$0-3] + '.' + $$[$0-1])) }; 
break;
case 9:
 
        definirConstante($$[$0-1], $$[$0].value);
        this.$ = { node: new Node('DEFINE', new Node($$[$0-1]), $$[$0].node) }; 
    
break;
case 10:
 
        definirConstante($$[$0], null);
        this.$ = { node: new Node('DEFINE', new Node($$[$0])) }; 
    
break;
case 12:

        // Adiciona cada declaração à lista de ASTs
        arvores.push(new AST($$[$0].node));
    
break;
case 13:
 this.$ = { node: $$[$0].node, stringValue: $$[$0].stringValue, value: $$[$0].value }; 
break;
case 14:
 this.$ = { node: new Node('BREAK') }; 
break;
case 15:
 this.$ = { node: new Node('CONTINUE') }; 
break;
case 16: case 17: case 58:
 this.$ = { node: $$[$0].node, stringValue: $$[$0].stringValue }; 
break;
case 27:
 this.$ = { node: new Node('MAIN_FUNCTION', new Node($$[$0-4]), $$[$0].node) }; 
break;
case 28:
 this.$ = { node: new Node('FUNCTION', new Node($$[$0-5]), new Node($$[$0-4]), $$[$0-2].node, $$[$0].node) }; 
break;
case 29:
 this.$ = { node: new Node('VOID_FUNCTION', new Node($$[$0-4]), $$[$0-2].node, $$[$0].node) }; 
break;
case 30:
 this.$ = { node: new Node('MAIN_FUNCTION', new Node($$[$0-5]), $$[$0-2].node, $$[$0].node) }; 
break;
case 31:
 this.$ = { node: new Node('VOID_MAIN_FUNCTION', $$[$0-2].node, $$[$0].node) }; 
break;
case 32:
 this.$ = { node: new Node('VOID_MAIN_FUNCTION', $$[$0].node) }; 
break;
case 33:
 this.$ = { node: new Node('FUNCTION_PROTOTYPE', new Node($$[$0-5]), new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 34:
 this.$ = { node: new Node('FUNCTION_PROTOTYPE', new Node($$[$0-4]), new Node($$[$0-3])) }; 
break;
case 35:
 this.$ = { node: new Node('VOID_FUNCTION_PROTOTYPE', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 36:
 this.$ = { node: new Node('VOID_FUNCTION_PROTOTYPE', new Node($$[$0-3])) }; 
break;
case 38:
 this.$ = { node: new Node('PARAMETER_LIST', $$[$0-2].node, $$[$0].node) }; 
break;
case 39:
 this.$ = { node: new Node('PARAMETER', new Node($$[$0-1]), new Node($$[$0])) }; 
break;
case 40:
 this.$ = { node: new Node('POINTER_PARAMETER', new Node($$[$0-2]), new Node($$[$0])) }; 
break;
case 41:
 this.$ = { node: new Node('RETURN', $$[$0-1].node) }; 
break;
case 42:
 this.$ = { node: new Node('RETURN') }; 
break;
case 43:
 this.$ = { node: new Node('BLOCK', $$[$0-1].node) }; 
break;
case 44:
 this.$ = { node: new Node('EMPTY_BLOCK') }; 
break;
case 45:
this.$ = {node: $$[$0-1].node, stringValue: $$[$0-1].stringValue, value: $$[$0-1].value}
break;
case 46: case 47: case 48:
this.$ = {node: $$[$0-1].node, stringValue: $$[$0-1].stringValue}
break;
case 49:
 this.$ = { node: new Node('FUNCTION_CALL', new Node($$[$0-3]), $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 50:
 this.$ = { node: new Node('FUNCTION_CALL', new Node($$[$0-2])), stringValue: criaTemp() }; 
break;
case 51:
 this.$ = { node: new Node('MALLOC', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 52:
 this.$ = { node: new Node('FREE', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 53:
 this.$ = { node: new Node('SCANF', $$[$0-4].node, new Node($$[$0-1])), stringValue: criaTemp() }; 
break;
case 54:
 this.$ = { node: new Node('SCANF', new Node('FORMAT_D'), new Node($$[$0-1])), stringValue: criaTemp() }; 
break;
case 55:
 this.$ = { node: new Node('PRINTF', $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 56:
 this.$ = { node: new Node('PRINTF', $$[$0-3].node, $$[$0-1].node), stringValue: criaTemp() }; 
break;
case 57:
 this.$ = { node: new Node('STRING', new Node($$[$0])), stringValue: $$[$0] }; 
break;
case 59:
 this.$ = { node: new Node('ARG_LIST', $$[$0-2].node, $$[$0].node), stringValue: $$[$0-2].stringValue + ',' + $$[$0].stringValue }; 
break;
case 60:

        // Apenas registra o nome do typedef para uso posterior
        definirConstante($$[$0-1], $$[$0-2]);  // Ex: typedef unsigned long ULong;
        this.$ = {
            node: new Node('TYPEDEF', new Node($$[$0-2]), new Node($$[$0-1]))
        };
    
break;
case 61: case 62:

        this.$ = {
            type: 'IF',
            node: new Node('IF', $$[$0-2].node, $$[$0].node)
        };
    
break;
case 63: case 64: case 65: case 66:

        this.$ = {
            type: 'IF_ELSE',
            node: new Node('IF_ELSE', $$[$0-4].node, $$[$0-2].node, $$[$0].node)
        };
    
break;
case 67: case 68:

        this.$ = {
            type: 'IF_ELSE_IF',
            node: new Node('IF_ELSE_IF', $$[$0-4].node, $$[$0-2].node, $$[$0].node)
        };
    
break;
case 69: case 70: case 71:
 this.$ = { node: new Node('SWITCH', $$[$0-4].node, $$[$0-1].node) }; 
break;
case 73:
 this.$ = { node: new Node('CASE_LIST', $$[$0-1].node, $$[$0].node) }; 
break;
case 74:
 this.$ = { node: new Node('CASE', $$[$0-1].node, null) }; 
break;
case 75:
 this.$ = { node: new Node('CASE', $$[$0-2].node, $$[$0].node) }; 
break;
case 76:
 this.$ = { node: new Node('DEFAULT', null) }; 
break;
case 77:
 this.$ = { node: new Node('DEFAULT', $$[$0].node) }; 
break;
case 78: case 79:

        this.$ = {
            type: 'WHILE',
            stringValue: criaTemp(),
            node: new Node('WHILE', $$[$0-2].node, $$[$0].node)
        };
        criaTACIf($$[$0-2].stringValue, temp.indexOf($$[$0].stringValue));
    
break;
case 80: case 81:

        this.$ = {
            type: 'FOR',
            node: new Node('FOR', $$[$0-4].node, $$[$0-3].node, $$[$0-2].node, $$[$0].node)
        };
        criaTACIf($$[$0-4].stringValue, temp.indexOf($$[$0].stringValue));
    
break;
case 82: case 83:

        this.$ = {
            type: 'DO_WHILE',
            node: new Node('DO_WHILE', $$[$0-5].node, $$[$0-2].node)
        };
        criaTACIf($$[$0-2].stringValue, temp.indexOf($$[$0-5].stringValue));
    
break;
case 84:

        this.$ = {
            type: 'INT_LIT',
            value: parseInt($$[$0]),
            stringValue: $$[$0],
            node: new Node('INT_LIT', new Node($$[$0]))
        };
    
break;
case 85:

        this.$ = {
            type: 'F_LIT',
            value: parseFloat($$[$0]),
            stringValue: $$[$0],
            node: new Node('F_LIT', new Node($$[$0]))
        };
    
break;
case 86:

        this.$ = {
            type: 'CHAR_LIT',
            value: $$[$0].charCodeAt(1),
            stringValue: $$[$0],
            node: new Node('CHAR_LIT', new Node($$[$0]))
        };
    
break;
case 87:

        // Trata IDF como valor de enum (como RED, GREEN, BLUE)
        verificaVariavel($$[$0]);
        this.$ = {
            type: 'ENUM_VALUE',
            value: $$[$0],
            stringValue: $$[$0],
            node: new Node('ENUM_VALUE', new Node($$[$0]))
        };
    
break;
case 88:
this.$ = 'int';
break;
case 89:
this.$ = 'double';
break;
case 90:
this.$ = 'float';
break;
case 91:
this.$ = 'char';
break;
case 92:
this.$ = 'unsigned int';
break;
case 93:
this.$ = 'signed int';
break;
case 94:
this.$ = 'long int';
break;
case 95:
this.$ = 'short int';
break;
case 96:
this.$ = 'const int';
break;
case 97:
this.$ = 'volatile int';
break;
case 98:
this.$ = 'register int';
break;
case 99:
this.$ = 'struct ' + $$[$0];
break;
case 100:
this.$ = 'union ' + $$[$0];
break;
case 101:
this.$ = 'enum ' + $$[$0];
break;
case 102:
 this.$ = 'unsigned long'; 
break;
case 103:
 this.$ = 'unsigned long int'; 
break;
case 104:
 this.$ = 'long'; 
break;
case 105:
 this.$ = 'long long'; 
break;
case 106:
 this.$ = 'long long int'; 
break;
case 107:
 this.$ = 'unsigned'; 
break;
case 108:

        const tipoDefinido = obterValorDefinicao($$[$0]);
        if (tipoDefinido !== undefined) {
            this.$ = tipoDefinido; // Por exemplo: 'unsigned long'
        } else {
            erros.push(`Tipo '${$$[$0]}' não foi definido como typedef`);
            this.$ = $$[$0];
        }
    
break;
case 109:

        this.$ = {
            node: $$[$0].node,
            value: [$$[$0].value]
        };
    
break;
case 110:

        $$[$0-2].value.push($$[$0].value);
        this.$ = {
            node: new Node('STRUCT_INIT_LIST', $$[$0-2].node, $$[$0].node),
            value: $$[$0-2].value
        };
    
break;
case 111:

        this.$ = {
            node: $$[$0].node,
            value: $$[$0].value
        };
    
break;
case 112:

        this.$ = {
            node: new Node('STRING_INIT', new Node($$[$0])),
            value: $$[$0]
        };
    
break;
case 113:

        this.$ = {
            node: $$[$0].node,
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 114:

        this.$ = {
            node: new Node('POINTER_DECL', new Node($$[$0-2]), $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 115:

        // Support for character literal declarations (like 'const int 'A';')
        let varName = '_char_const_' + $$[$0-1];
        criarVariavel($$[$0-3], varName, $$[$0-1].charCodeAt(0));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-3]), new Node($$[$0-1])),
            value: $$[$0-1].charCodeAt(0),
            stringValue: varName
        };
    
break;
case 116:

        criarVariavel('struct ' + $$[$0-5], $$[$0-4], $$[$0-1].value);
        this.$ = {
            node: new Node('STRUCT_INIT', new Node($$[$0-5]), new Node($$[$0-4]), $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-4]
        };
    
break;
case 117:

        criarVariavel($$[$0-1], $$[$0], null);
        this.$ = {
            node: new Node('DECL', new Node($$[$0-1]), new Node($$[$0])),
            value: null,
            stringValue: $$[$0]
        };
    
break;
case 118:

        // Support for character literal constant declarations (like 'const int 'A';')
        let varName1 = '_char_const_' + $$[$0].replace(/'/g, '');
        criarVariavel($$[$0-1], varName1, $$[$0].charCodeAt(1));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-1]), new Node($$[$0])),
            value: $$[$0].charCodeAt(1),
            stringValue: varName1
        };
    
break;
case 119:

        // Support for character literal using quotes (like 'const int 'A';')
        let varName2 = '_char_const_' + $$[$0-1];
        criarVariavel($$[$0-3], varName2, $$[$0-1].charCodeAt(0));
        this.$ = {
            node: new Node('CHAR_CONST_DECL', new Node($$[$0-3]), new Node($$[$0-1])),
            value: $$[$0-1].charCodeAt(0),
            stringValue: varName2
        };
    
break;
case 120:

        criarVariavel($$[$0-3], $$[$0-2], $$[$0].value);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), $$[$0].node),
            value: $$[$0].value,
            stringValue: $$[$0].stringValue
        };
    
break;
case 121:

        criarVariavel($$[$0-4]+'[]', $$[$0-3], null);
        this.$ = {
            node: new Node('ARRAY_DECL', new Node($$[$0-4]), new Node($$[$0-3]), new Node($$[$0-1])),
            value: null,
            stringValue: $$[$0-3]
        };
    
break;
case 122:

        criarVariavel($$[$0-7]+'[][]', $$[$0-6], null);
        this.$ = {
            node: new Node('ARRAY2D_DECL', new Node($$[$0-7]), new Node($$[$0-6]), new Node($$[$0-4]), new Node($$[$0-1])),
            value: null,
            stringValue: $$[$0-6]
        };
    
break;
case 123:

        criarVariavel($$[$0-11]+'[][]', $$[$0-10], $$[$0-2].value);
        this.$ = {
            node: new Node('ARRAY2D_INIT', new Node($$[$0-11]), new Node($$[$0-10]), new Node($$[$0-8]), new Node($$[$0-5]), $$[$0-2].node),
            value: $$[$0-2].value,
            stringValue: $$[$0-10]
        };
    
break;
case 124:

        // Verifica se o identificador é uma definição
        let valDef1 = obterValorDefinicao($$[$0-1]);
        if (valDef1 !== undefined) {
            criarVariavel($$[$0-4]+'[]', $$[$0-3], null);
            this.$ = {
                node: new Node('ARRAY_DECL', new Node($$[$0-4]), new Node($$[$0-3]), new Node(valDef1)),
                value: null,
                stringValue: $$[$0-3]
            };
        } else {
            erros.push("Identificador '" + $$[$0-1] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_DECL_ERROR'),
                value: null,
                stringValue: $$[$0-3]
            };
        }
    
break;
case 125:

        criarVariavel($$[$0-8]+'[]', $$[$0-7], $$[$0-1].value);
        this.$ = {
            node: new Node('ARRAY_INIT', new Node($$[$0-8]), new Node($$[$0-7]), new Node($$[$0-5]), $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-7]
        };
    
break;
case 126:

        // Verifica se o identificador é uma definição
        let valDef2 = obterValorDefinicao($$[$0-3]);
        if (valDef2 !== undefined) {
            criarVariavel($$[$0-8]+'[]', $$[$0-7], $$[$0-1].value);
            this.$ = {
                node: new Node('ARRAY_INIT', new Node($$[$0-8]), new Node($$[$0-7]), new Node(valDef2), $$[$0-1].node),
                value: $$[$0-1].value,
                stringValue: $$[$0-7]
            };
        } else {
            erros.push("Identificador '" + $$[$0-3] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_INIT_ERROR'),
                value: null,
                stringValue: $$[$0-7]
            };
        }
    
break;
case 127:

        criarVariavel($$[$0-3], $$[$0], null);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-2].node, new Node($$[$0])),
            value: null,
            stringValue: $$[$0-2].stringValue + ',' + $$[$0]
        };
    
break;
case 128:

        criarVariavel($$[$0-5], $$[$0-2], $$[$0].value);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-4].node, new Node('=', new Node($$[$0-2]), $$[$0].node)),
            value: null,
            stringValue: $$[$0-4].stringValue + ',' + $$[$0-2]
        };
    
break;
case 129:

        criarVariavel($$[$0-6]+'[]', $$[$0-3], null);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-5].node, new Node('ARRAY_DECL', new Node($$[$0-6]), new Node($$[$0-3]), new Node($$[$0-1]))),
            value: null,
            stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
        };
    
break;
case 130:

        // Verifica se o identificador é uma definição
        let valDef3 = obterValorDefinicao($$[$0-1]);
        if (valDef3 !== undefined) {
            criarVariavel($$[$0-6]+'[]', $$[$0-3], null);
            this.$ = {
                node: new Node('MULTI_DECL', $$[$0-5].node, new Node('ARRAY_DECL', new Node($$[$0-6]), new Node($$[$0-3]), new Node(valDef3))),
                value: null,
                stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
            };
        } else {
            erros.push("Identificador '" + $$[$0-1] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_DECL_ERROR'),
                value: null,
                stringValue: $$[$0-5].stringValue + ',' + $$[$0-3]
            };
        }
    
break;
case 131:

        criarVariavel($$[$0-10]+'[]', $$[$0-7], $$[$0-1].value);
        this.$ = {
            node: new Node('MULTI_DECL', $$[$0-9].node, new Node('ARRAY_INIT', new Node($$[$0-10]), new Node($$[$0-7]), new Node($$[$0-5]), $$[$0-1].node)),
            value: null,
            stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
        };
    
break;
case 132:

        // Verifica se o identificador é uma definição
        let valDef4 = obterValorDefinicao($$[$0-5]);
        if (valDef4 !== undefined) {
            criarVariavel($$[$0-10]+'[]', $$[$0-7], $$[$0-1].value);
            this.$ = {
                node: new Node('MULTI_DECL', $$[$0-9].node, new Node('ARRAY_INIT', new Node($$[$0-10]), new Node($$[$0-7]), new Node(valDef4), $$[$0-1].node)),
                value: null,
                stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
            };
        } else {
            erros.push("Identificador '" + $$[$0-5] + "' não é uma constante definida");
            this.$ = {
                node: new Node('ARRAY_INIT_ERROR'),
                value: null,
                stringValue: $$[$0-9].stringValue + ',' + $$[$0-7]
            };
        }
    
break;
case 133:

        this.$ = {
            node: new Node($$[$0]),
            value: [$$[$0]],
            stringValue: $$[$0].stringValue
        };
    
break;
case 134:

        this.$ = {
            node: new Node('ARRAY_INIT_LIST', $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-1].stringValue
        };
    
break;
case 135:

        this.$ = {
            node: new Node('ARRAY2D_INIT_LIST', $$[$0-1].node),
            value: $$[$0-1].value,
            stringValue: $$[$0-1].stringValue
        };
    
break;
case 136:

        $$[$0-2].value.push($$[$0]);
        this.$ = {
            node: new Node('ARRAY_ELEMS', $$[$0-2].node, new Node($$[$0])),
            value: $$[$0-2].value,
            stringValue: $$[$0-2].stringValue
        };
    
break;
case 137:

        this.$ = {
            node: $$[$0].node,
            value: [$$[$0].value],
            stringValue: $$[$0].stringValue
        };
    
break;
case 138:

        $$[$0-2].value.push($$[$0].value);
        this.$ = {
            node: new Node('ARRAY2D_ELEMS', $$[$0-2].node, $$[$0].node),
            value: $$[$0-2].value,
            stringValue: $$[$0-2].stringValue
        };
    
break;
case 139:

        this.$ = {
            node: new Node('ARRAY2D_ROW', $$[$0-1].node),
            value: [$$[$0-1].value],
            stringValue: $$[$0-1].stringValue
        };
    
break;
case 140:

        $$[$0-4].value.push($$[$0-1].value);
        this.$ = {
            node: new Node('ARRAY2D_ROWS', $$[$0-4].node, $$[$0-1].node),
            value: $$[$0-4].value,
            stringValue: $$[$0-4].stringValue
        };
    
break;
case 141: case 142: case 143:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '=');
    
break;
case 144:

        verificaVariavel($$[$0-4]);
        this.$ = {
            node: new Node('=', new Node($$[$0-4]), new Node('CHAR_LIT', new Node($$[$0-1]))),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-4], "'" + $$[$0-1] + "'", '=');
    
break;
case 145:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('=', new Node($$[$0-2]), new Node('CHAR_LIT', new Node($$[$0]))),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0], '=');
    
break;
case 146:

        this.$ = {
            node: new Node('=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '=');
    
break;
case 147:

        this.$ = {
            node: $$[$0].node,
            stringValue: $$[$0].stringValue
        };
    
break;
case 148:

        verificaVariavel($$[$0-4]);
        this.$ = {
            node: new Node('MEMBER_ASSIGN', new Node($$[$0-4]), new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-4] + '.' + $$[$0-2], $$[$0].stringValue, '=');
    
break;
case 149:

        this.$ = {
            node: new Node('MALLOC', $$[$0-1].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC', $$[$0-1].stringValue, 'CALL');
    
break;
case 150:

        this.$ = {
            node: new Node('MALLOC_SIZEOF', new Node($$[$0-6]), new Node($$[$0-2])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC_SIZEOF', $$[$0-6] + '*sizeof(' + $$[$0-2] + ')', 'CALL');
    
break;
case 151:

        this.$ = {
            node: new Node('MALLOC_SIZEOF', new Node($$[$0-7]), new Node($$[$0-3] + '*')),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, 'MALLOC_SIZEOF', $$[$0-7] + '*sizeof(' + $$[$0-3] + '*)', 'CALL');
    
break;
case 152:

        this.$ = {
            type: 'CAST',
            stringValue: criaTemp(),
            node: new Node('CAST', new Node($$[$0-2]), $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0].stringValue, $$[$0-2], 'CAST');
      
break;
case 153:

        verificaVariavel($$[$0-3]);
        this.$ = {
            node: new Node('ARRAY_ACCESS', new Node($$[$0-3]), $$[$0-1].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-3], $$[$0-1].stringValue, 'ARRAY_ACCESS');
    
break;
case 154:

        verificaVariavel($$[$0-6]);
        this.$ = {
            node: new Node('ARRAY2D_ACCESS', new Node($$[$0-6]), $$[$0-4].node, $$[$0-1].node),
            stringValue: criaTemp()
        };
        let tempIndex1 = criaTemp();
        let tempOffset = criaTemp();
        // Cálculo do offset para array bidimensional: base + (i * colunas + j) * tamanho_do_elemento
        criaTAC(tempIndex1, $$[$0-4].stringValue, $$[$0-1].stringValue, 'MUL');
        criaTAC(tempOffset, tempIndex1, 'sizeof(int)', 'MUL'); // Assumindo int por simplicidade
        criaTAC(this.$.stringValue, $$[$0-6], tempOffset, 'ADD');
    
break;
case 155:

        verificaVariavel($$[$0-1]);
        this.$ = {
            node: new Node('++', new Node($$[$0-1])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-1], '1', '++');
    
break;
case 156:

        verificaVariavel($$[$0-1]);
        this.$ = {
            node: new Node('--', new Node($$[$0-1])),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-1], '1', '--');
    
break;
case 157:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('+=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '+=');
    
break;
case 158:

        verificaVariavel($$[$0-2]);
        this.$ = {
            node: new Node('-=', new Node($$[$0-2]), $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, '-=');
    
break;
case 159:

        this.$ = {
            node: new Node('+=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '+=');
    
break;
case 160:

        this.$ = {
            node: new Node('-=', $$[$0-2].node, $$[$0].node),
            stringValue: criaTemp()
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, '-=');
    
break;
case 161: case 167:
   
        this.$ = {
            type: $$[$0].type,
            value: $$[$0].value,
            stringValue: $$[$0].stringValue,
            node: $$[$0].node
        }
    
break;
case 162:
   
        this.$ = {
            type: 'SUM',
            value: $$[$0-2].value + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('+', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'SUM');
    
break;
case 163:
   
        this.$ = {
            type: 'SUB',
            value: $$[$0-2].value - $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('-', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'SUB');
    
break;
case 164:

        this.$ = {
            type: 'SIZEOF',
            value: $$[$0].value,
            stringValue: $$[$0].stringValue,
            node: $$[$0].node
        }
    
break;
case 165:

        this.$ = {
            type: 'SIZEOF',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('SIZEOF', new Node($$[$0-1]))
        };
        criaTAC(this.$.stringValue, 'SIZEOF', $$[$0-1], 'UNARY');
    
break;
case 166:

        this.$ = {
            type: 'SIZEOF',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('SIZEOF', new Node($$[$0-2] + '*'))
        };
        criaTAC(this.$.stringValue, 'SIZEOF', $$[$0-2] + '*', 'UNARY');
    
break;
case 168:
   
        this.$ = {
            type: 'MUL',
            value: $$[$0-2].value * $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('*', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MUL');
    
break;
case 169:
   
        this.$ = {
            type: 'MUL',
            value: 0, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('MUL', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MUL');
    
break;
case 170:
   
        this.$ = {
            type: 'DIV',
            value: $$[$0-2].value / $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('/', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'DIV');
    
break;
case 171:
   
        this.$ = {
            type: 'MOD',
            value: $$[$0-2].value % $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('%', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'MOD');
    
break;
case 172:

        // Verificar se o identificador é uma constante definida
        let defValue = obterValorDefinicao($$[$0]);
        if (defValue !== undefined) {
            this.$ = {
                type: 'DEFINE_CONST',
                value: defValue,
                stringValue: $$[$0],
                node: new Node('DEFINE_CONST', new Node($$[$0]))
            };
        } else {
            // Se não for uma constante, então é uma variável normal
            verificaVariavel($$[$0]);
            this.$ = {
                type: 'IDF',
                value: $$[$0],
                stringValue: $$[$0],
                node: new Node('IDF')
            };
        }
      
break;
case 173:
this.$ = {type: $$[$0].type, stringValue: $$[$0].stringValue, node: $$[$0].node, value: $$[$0].value};
break;
case 174:
this.$ = $$[$0-1];
break;
case 175: case 177: case 180:
this.$ = $$[$0];
break;
case 176:

        this.$ = {
            type: 'UNARY_MINUS',
            value: -$$[$0].value,
            stringValue: criaTemp(),
            node: new Node('UNARY_MINUS', $$[$0].node)
        };
        criaTACUnaryOp('-', $$[$0].stringValue, this.$.stringValue);
      
break;
case 178:

        this.$ = {
            type: 'DEREF',
            stringValue: criaTemp(),
            node: new Node('DEREF', $$[$0].node)
        };
        criaTAC(this.$.stringValue, '*', $$[$0].stringValue, 'DEREF');
      
break;
case 179:

        this.$ = {
            type: 'ADDR',
            stringValue: criaTemp(),
            node: new Node('ADDR', $$[$0].node)
        };
        criaTAC(this.$.stringValue, '&', $$[$0].stringValue, 'ADDR');
      
break;
case 181:

        this.$ = {
            type: 'CAST_MALLOC',
            stringValue: criaTemp(),
            node: new Node('CAST_MALLOC', new Node($$[$0-3] + '*'), $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0].stringValue, $$[$0-3] + '*', 'CAST');
    
break;
case 182:
  
        verificaVariavel($$[$0-2]);
        this.$ = {
            type: 'MEMBER_ACCESS',
            value: $$[$0-2] + '.' + $$[$0],
            stringValue: criaTemp(),
            node: new Node('MEMBER_ACCESS', new Node($$[$0-2]), new Node($$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0], 'DOT');
    
break;
case 184: case 203:

        this.$ = {
            type: 'NOT',
            value: !$$[$0].value,
            stringValue: criaTemp(),
            node: new Node('NOT', $$[$0].node)
        };
        criaTACUnaryOp('!', $$[$0].stringValue, this.$.stringValue);
    
break;
case 185: case 189: case 207:

        this.$ = {
            type: $$[$0-1],
            value: $$[$0-2].value + $$[$0-1] + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node($$[$0-1], $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, $$[$0-1]);
    
break;
case 186:

        this.$ = {
            type: $$[$0-4],
            value: $$[$0-5].value + $$[$0-4] + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node($$[$0-4], $$[$0-5].node, new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulCond1 = criaTemp();
        criaTAC(tempMulCond1, $$[$0-2], $$[$0], 'MUL');
        let tempNegCond1 = criaTemp();
        criaTACUnaryOp('-', tempMulCond1, tempNegCond1);
        criaTAC(this.$.stringValue, $$[$0-5].stringValue, tempNegCond1, $$[$0-4]);
    
break;
case 187: case 197:

        this.$ = {
            type: 'AND',
            value: $$[$0-2].value && $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('AND', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'AND');
    
break;
case 188: case 195:

        this.$ = {
            type: 'OR',
            value: $$[$0-2].value || $$[$0].value,
            stringValue: criaTemp(),
            node: new Node('OR', $$[$0-2].node, $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0].stringValue, 'OR');
    
break;
case 190:

        verificaVariavel($$[$0-2]);
        this.$ = {
            type: $$[$0-1],
            value: $$[$0-2] + $$[$0-1] + $$[$0].value,
            stringValue: criaTemp(),
            node: new Node($$[$0-1], new Node($$[$0-2]), $$[$0].node)
        };
        criaTAC(this.$.stringValue, $$[$0-2], $$[$0].stringValue, $$[$0-1]);
    
break;
case 191:

        verificaVariavel($$[$0]);
        this.$ = {
            type: $$[$0-1],
            value: $$[$0-2].value + $$[$0-1] + $$[$0],
            stringValue: criaTemp(),
            node: new Node($$[$0-1], $$[$0-2].node, new Node($$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-2].stringValue, $$[$0], $$[$0-1]);
    
break;
case 192:

        verificaVariavel($$[$0-5]);
        this.$ = {
            type: $$[$0-4],
            value: $$[$0-5] + $$[$0-4] + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node($$[$0-4], new Node($$[$0-5]), new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulCond2 = criaTemp();
        criaTAC(tempMulCond2, $$[$0-2], $$[$0], 'MUL');
        let tempNegCond2 = criaTemp();
        criaTACUnaryOp('-', tempMulCond2, tempNegCond2);
        criaTAC(this.$.stringValue, $$[$0-5], tempNegCond2, $$[$0-4]);
    
break;
case 193:

        verificaVariavel($$[$0-5]);
        verificaVariavel($$[$0]);
        this.$ = {
            type: 'EQ',
            value: $$[$0-5] + '==' + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-5]), new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulCond3 = criaTemp();
        criaTAC(tempMulCond3, $$[$0-2], $$[$0], 'MUL');
        let tempNegCond3 = criaTemp();
        criaTACUnaryOp('-', tempMulCond3, tempNegCond3);
        criaTAC(this.$.stringValue, $$[$0-5], tempNegCond3, '==');
    
break;
case 200:

        this.$ = $$[$0-1];
    
break;
case 201:

        verificaVariavel($$[$0-2]);
        this.$ = {
            type: 'EQ_NULL',
            value: false, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-2]), new Node('NULL'))
        };
        criaTAC(this.$.stringValue, $$[$0-2], 'NULL', 'EQ');
    
break;
case 202:

        verificaVariavel($$[$0-3]);
        this.$ = {
            type: 'EQ_NEG',
            value: false, // Valor padrão
            stringValue: criaTemp(),
            node: new Node('==', new Node($$[$0-3]), new Node('-' + $$[$0]))
        };
        criaTAC(this.$.stringValue, $$[$0-3], '-' + $$[$0], 'EQ');
    
break;
case 204:

        this.$ = {
            type: 'NOT',
            value: !$$[$0-1].value,
            stringValue: criaTemp(),
            node: new Node('NOT', $$[$0-1].node)
        };
        criaTACUnaryOp('!', $$[$0-1].stringValue, this.$.stringValue);
    
break;
case 205:

        this.$ = $$[$0];
    
break;
case 206:

        this.$ = {
            type: 'UNARY_MINUS_MUL',
            value: -parseInt($$[$0-2]) * 1, // placeholder for IDF value
            stringValue: criaTemp(),
            node: new Node('UNARY_MINUS_MUL', new Node($$[$0-2]), new Node($$[$0]))
        };
        let tempMulPrim = criaTemp();
        criaTAC(tempMulPrim, $$[$0-2], $$[$0], 'MUL');
        criaTACUnaryOp('-', tempMulPrim, this.$.stringValue);
    
break;
case 208:

        this.$ = {
            type: $$[$0-2],
            value: $$[$0-3].value + $$[$0-2] + (-$$[$0].value),
            stringValue: criaTemp(),
            node: new Node($$[$0-2], $$[$0-3].node, new Node('UNARY_MINUS', $$[$0].node))
        };
        let tempNegRel = criaTemp();
        criaTACUnaryOp('-', $$[$0].stringValue, tempNegRel);
        criaTAC(this.$.stringValue, $$[$0-3].stringValue, tempNegRel, $$[$0-2]);
    
break;
case 209:

        this.$ = {
            type: $$[$0-4],
            value: $$[$0-5].value + $$[$0-4] + (-parseInt($$[$0-2])),
            stringValue: criaTemp(),
            node: new Node($$[$0-4], $$[$0-5].node, new Node('UNARY_MINUS', new Node('MUL', new Node($$[$0-2]), new Node($$[$0]))))
        };
        let tempMulRel = criaTemp();
        criaTAC(tempMulRel, $$[$0-2], $$[$0], 'MUL');
        let tempNegRel2 = criaTemp();
        criaTACUnaryOp('-', tempMulRel, tempNegRel2);
        criaTAC(this.$.stringValue, $$[$0-5].stringValue, tempNegRel2, $$[$0-4]);
    
break;
case 210:

        verificaVariavel($$[$0]);
        this.$ = {
            type: $$[$0-2],
            value: $$[$0-3].value + $$[$0-2] + ('-' + $$[$0]),
            stringValue: criaTemp(),
            node: new Node($$[$0-2], $$[$0-3].node, new Node('UNARY_MINUS', new Node($$[$0])))
        };
        let tempNegRel3 = criaTemp();
        criaTACUnaryOp('-', $$[$0], tempNegRel3);
        criaTAC(this.$.stringValue, $$[$0-3].stringValue, tempNegRel3, $$[$0-2]);
    
break;
case 216:
this.$ = $$[$0]
break;
case 217:
 this.$ = { node: new Node('STRUCT_DECL', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 218:
 
        this.$ = { 
            node: new Node('STRUCT_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 220:
 this.$ = { node: new Node('STRUCT_MEMBERS', $$[$0-1].node, $$[$0].node) }; 
break;
case 221:
 this.$ = { node: new Node('STRUCT_MEMBER', new Node($$[$0-2]), new Node($$[$0-1])) }; 
break;
case 222:
 this.$ = { node: new Node('STRUCT_ARRAY_MEMBER', new Node($$[$0-5]), new Node($$[$0-4]), new Node($$[$0-2])) }; 
break;
case 223:
 this.$ = { node: new Node('UNION_DECL', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 224:
 
        this.$ = { 
            node: new Node('UNION_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 225:
 this.$ = { node: new Node('ENUM_DECL', new Node($$[$0-4]), $$[$0-2].node) }; 
break;
case 226:
 
        this.$ = { 
            node: new Node('ENUM_WITH_VAR', new Node($$[$0-5]), $$[$0-3].node, new Node($$[$0-1])) 
        }; 
    
break;
case 228:
 this.$ = { node: new Node('ENUM_MEMBERS', $$[$0-2].node, $$[$0].node) }; 
break;
case 229:
 this.$ = { node: new Node('ENUM_MEMBER', new Node($$[$0])) }; 
break;
case 230:
 this.$ = { node: new Node('ENUM_MEMBER_VALUE', new Node($$[$0-2]), new Node($$[$0])) }; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1,16:$V2,17:71,18:6,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{1:[3]},{5:[1,78]},{7:79,8:80,9:$V0,14:$V1,16:$V2,17:71,18:6,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{5:[2,3],14:$V1,17:71,18:81,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($VF,[2,4]),o($VG,[2,11]),{10:[1,82]},{14:[1,83]},o($VH,[2,13]),{21:[1,84]},{21:[1,85]},o($VH,[2,16]),o($VH,[2,17]),o($VH,[2,18]),o($VG,[2,19]),o($VH,[2,20]),o($VH,[2,21]),o($VH,[2,22]),o($VH,[2,23]),o($VH,[2,24]),o($VH,[2,25]),o($VH,[2,26]),{21:[1,86]},{21:[1,87]},{21:[1,88],119:$VI,120:$VJ},{21:[1,91]},{36:[1,92]},{36:[1,93]},{36:[1,94]},{14:$V1,17:71,18:96,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:95,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{36:[1,97]},{7:98,14:$V1,17:71,18:6,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,46:[1,99],47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:[1,101],35:[1,100],42:$VK,75:$VL,92:102,93:$VM},{14:[1,106],35:[1,107]},{14:$VN,17:71,21:[1,109],36:$VO,42:$V7,44:108,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:[1,114]},{14:[1,115]},{14:[1,116]},{14:$VQ,34:117,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},o([14,21,35,42,75,93,110,111,113,114,119,120],$VU,{118:124,10:$VV,12:$VW,15:[1,123],36:[1,126],94:$VX,95:$VY,105:$VZ,106:$V_,107:$V$,108:$V01,121:$V11,126:$V21,127:$V31,128:$V41}),o($V51,$V61,{94:$V71,107:$V81,108:$V91}),o($Va1,[2,147]),o([21,37,119],[2,183],{120:[1,140]}),{14:$Vb1,17:71,36:[1,143],42:$V7,44:46,49:141,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:142,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($Vc1,$Vd1,{118:145,10:$VV,12:$VW,121:$Ve1,126:$V21,127:$V31,128:$V41}),o($Vc1,$Vf1,{118:147,10:$VV,12:$VW,110:$Vg1,111:$Vh1,121:$Ve1,126:$V21,127:$V31,128:$V41}),{36:[1,150]},{36:[1,151]},{36:[1,152]},{36:[1,153]},o($Vi1,[2,88]),o($Vi1,[2,89]),o($Vi1,[2,90]),o($Vi1,[2,91]),o($Vi1,[2,107],{76:[1,154],82:[1,155]}),{76:[1,156]},o($Vi1,[2,104],{76:[1,157],82:[1,158]}),{76:[1,159]},{76:[1,160]},{76:[1,161]},{76:[1,162]},o($Vj1,[2,194],{119:$Vk1}),{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:[1,164],74:$Vm,75:$Vn,101:112,103:$VC,104:165,111:$VP,112:166},o($Vl1,[2,161],{42:$Vm1,113:$Vn1,114:$Vo1}),o($Vp1,[2,164]),o($Vc1,[2,196]),o($Vp1,$Vq1),{36:[1,170]},o($Vc1,[2,199]),{14:$Vr1,17:71,34:173,36:$V5,42:$V7,44:172,49:171,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($Vp1,[2,173]),o($Vp1,$Vs1),{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:175,111:$VP,112:166},{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:176,111:$VP,112:166},o($Vt1,$Vu1),o($Vt1,[2,85]),o($Vt1,$Vv1),{1:[2,1]},{5:[2,2],14:$V1,17:71,18:81,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($VF,[2,5]),o($VG,[2,12]),{11:[1,177],13:[1,178],14:[1,179]},o([9,16,20,22,36,39,42,43,45,52,53,54,56,58,60,61,63,70,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,103,111,116],[2,10],{17:180,14:$Vw1,73:$Vl,74:$Vm,75:$Vn}),o($VH,[2,14]),o($VH,[2,15]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),{14:$Vb1,17:71,36:$V5,42:$V7,44:46,49:182,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$Vb1,17:71,36:$V5,42:$V7,44:46,49:183,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($VH,[2,48]),{14:$Vb1,17:71,36:$V5,42:$V7,44:46,49:184,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$Vb1,17:71,36:$V5,42:$V7,44:46,49:185,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$V1,17:71,19:186,34:187,36:$V5,42:$V7,44:46,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,65:72,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vx1,88:$VS,89:$VT,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{70:[1,189]},{70:[1,190]},{14:$Vb1,17:71,36:$V5,42:$V7,44:191,49:193,56:$Vd,65:192,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$V1,17:71,18:81,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,46:[1,194],47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($VH,[2,44]),{36:[1,195]},o($Vy1,$Vz1,{36:[1,196],94:$VA1,95:$VB1}),{21:[2,113],41:$VC1},{14:$VD1,75:$VL,92:200,93:[1,202]},{14:[1,203]},o($Vy1,[2,118]),{36:[1,204]},{36:[1,205]},{21:[1,206],110:$Vg1,111:$Vh1},o($VH,[2,42]),o($Vp1,$VE1,{15:$VF1,95:$VY}),{14:[1,209],17:71,34:173,36:$VO,42:$V7,44:208,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,101:112,103:$VC,104:67,109:64,111:$VP,112:65},o($Vp1,$V61),{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:165,111:$VP,112:166},o([35,42,75,93],$VG1,{14:$VH1,45:[1,210]}),o($VI1,$VJ1,{45:[1,212]}),o($VI1,$VK1,{45:[1,213]}),{14:[1,214]},{14:[1,215]},{14:[1,216]},{14:[1,217]},o($VL1,$VU),{14:$VN,17:71,36:$VO,42:$V7,44:218,52:$VM1,56:$Vd,65:220,73:$Vl,74:$Vm,75:[1,222],93:[1,221],100:219,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:[1,224]},{14:$VN,17:71,36:$VO,42:$V7,44:225,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:[1,226],112:65},o([14,36,42,56,73,74,75,103],$VN1,{111:[1,227],125:$VO1}),{14:$VN,17:71,36:$VO,37:[1,230],42:$V7,44:231,51:229,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VN,17:71,36:$VO,42:$V7,44:232,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},o($Va1,[2,155]),o($Va1,[2,156]),{14:$VN,17:71,36:$VO,42:$V7,44:233,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VN,17:71,36:$VO,42:$V7,44:234,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},o($VP1,[2,211]),o($VP1,[2,212]),o($VP1,[2,214]),o($VP1,[2,215]),o($VP1,[2,216]),{14:$VN,17:71,36:$VO,42:$V7,44:235,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VN,17:71,36:$VO,42:$V7,44:236,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VN,17:71,36:$VO,42:$V7,44:237,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VQ1,17:71,36:$V5,42:$V7,44:242,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,116:$VR1,117:239,122:238,123:66,124:69},o($Va1,[2,184],{119:$VI,120:$VJ}),o([10,12,42,110,111,113,114,121,126,127,128],$Vq1,{21:$VS1,37:$VS1,119:$VS1,120:$VS1}),{14:$Vr1,17:71,34:173,36:$V5,42:$V7,44:172,49:243,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($VT1,$VE1,{118:124,10:$VV,12:$VW,15:$VF1,95:$VY,121:$V11,126:$V21,127:$V31,128:$V41}),{14:$VN,17:71,36:$VO,42:$V7,44:242,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:[1,245],112:65,117:244},o($VP1,$VN1),{14:[1,247],17:71,36:$VO,42:$V7,44:246,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:248,111:$VP,112:166},{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:249,111:$VP,112:166},{14:$VN,17:71,36:$VO,42:$V7,44:250,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VN,17:71,36:$VO,42:$V7,44:251,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{55:252,57:[1,253],59:$VU1},{55:255,59:$VU1},o($Vi1,[2,92]),o($Vi1,[2,102],{76:[1,256]}),o($Vi1,[2,93]),o($Vi1,[2,94]),o($Vi1,[2,105],{76:[1,257]}),o($Vi1,[2,95]),o($Vi1,[2,96]),o($Vi1,[2,97]),o($Vi1,[2,98]),{14:$VQ1,17:71,36:$V5,42:$V7,44:242,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,116:$VR1,117:239,123:258,124:69},o([10,12,21,37,110,111,113,114,119,120,121,126,127,128],$Vu1,{42:[1,259]}),o($Vp1,$VV1),o($Vp1,[2,180]),{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:260,111:$VP,112:261},{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:262,111:$VP,112:166},{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:263,111:$VP,112:166},{14:$VQ,34:264,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},{37:[1,265],119:$VI,120:$VJ},o($VW1,$Vf1,{118:147,10:$VV,12:$VW,37:$VX1,110:$Vg1,111:$Vh1,121:$Ve1,126:$V21,127:$V31,128:$V41}),{37:[1,268],42:[1,267]},o([37,42,110,111,113,114,119,120],$VU,{118:124,10:$VV,12:$VW,15:$VF1,95:$VY,121:$V11,126:$V21,127:$V31,128:$V41}),o($Vp1,[2,178]),o($Vp1,[2,179]),{12:[1,269]},{12:[1,270]},{15:[1,271]},o($VF,[2,9]),o([9,14,16,20,22,36,39,41,42,43,45,46,52,53,54,56,58,60,61,63,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,103,111,116],[2,87]),o($Va1,[2,187],{119:$VI,120:$VJ}),o($Va1,[2,188],{119:$VI,120:$VJ}),{37:[1,272],119:$VI,120:$VJ},{37:[1,273],119:$VI,120:$VJ},{14:$V1,17:71,19:274,34:187,36:$V5,42:$V7,44:46,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,65:72,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vx1,88:$VS,89:$VT,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$VD1,42:$VK,75:$VL,92:102,93:$VM},{14:[1,275]},{36:[1,276]},{36:[1,277]},o($VW1,$Vf1,{118:147,10:$VV,12:$VW,37:[1,278],110:$Vg1,111:$Vh1,121:$Ve1,126:$V21,127:$V31,128:$V41}),o([10,12,42,110,111,113,114,119,120,121,126,127,128],$Vs1,{37:[1,279]}),{37:[1,280],119:$VI,120:$VJ},o($VH,[2,43]),{14:$VQ,34:284,37:[1,281],38:282,40:283,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},{14:$VQ,34:284,37:[1,286],38:285,40:283,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},{14:$VN,17:71,36:$VO,42:$V7,44:287,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:[1,289],73:[1,288]},{14:[1,290]},{21:[2,114],41:$VC1},o($Vy1,$Vz1,{94:$VA1,95:$VB1}),{14:[1,291]},{93:[1,292]},{14:$VQ,34:284,37:[1,294],38:293,40:283,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},{14:$VQ,34:284,37:[1,296],38:295,40:283,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},o($VH,[2,41]),{14:[1,297]},{37:$VX1,110:$Vg1,111:$Vh1},o([37,42,110,111,113,114],$VU,{15:$VF1,95:$VY}),{14:$VQ,34:300,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,129:298,130:299},{94:[1,301]},{14:$VQ,34:300,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,129:302,130:299},{14:$VY1,131:303,132:304},{21:[1,306]},o($VL1,$VG1),o($VZ1,$VJ1),o($VZ1,$VK1),o($Va1,[2,141],{110:$Vg1,111:$Vh1}),o($Va1,[2,142]),o($V_1,$Vs1,{21:$V$1,37:$V$1}),{14:[1,307]},o($V_1,$Vv1,{21:$V02,37:$V02}),{36:[1,308]},o($V51,$V12,{94:$V22}),o($Vc1,[2,190],{110:$Vg1,111:$Vh1}),{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:[1,310],74:$Vm,75:$Vn,101:112,103:$VC,104:165,111:$VP,112:166},{73:[1,311]},o($Vc1,[2,201]),{37:[1,312],41:$V32},{21:[2,50]},o($V42,[2,58],{110:$Vg1,111:$Vh1}),{96:[1,314],110:$Vg1,111:$Vh1},o($Va1,[2,157],{110:$Vg1,111:$Vh1}),o($Va1,[2,158],{110:$Vg1,111:$Vh1}),o($Va1,[2,146],{110:$Vg1,111:$Vh1}),o($Va1,[2,159],{110:$Vg1,111:$Vh1}),o($Va1,[2,160],{110:$Vg1,111:$Vh1}),o($Vj1,[2,195],{119:$Vk1}),o($Vc1,$Vd1,{118:315,10:$VV,12:$VW,121:$Ve1,126:$V21,127:$V31,128:$V41}),o([10,12,21,37,42,110,111,113,114,119,120,126,127,128],$VE1,{15:$VF1,95:$VY,121:[1,316]}),{14:$VN,17:71,36:[1,318],42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:317,111:$VP,112:166},o($V52,$Vf1,{110:$Vg1,111:$Vh1}),{37:[1,319],119:$VI,120:$VJ},o($Vc1,[2,185]),{14:$V62,17:71,36:$VO,42:$V7,44:242,56:$Vd,65:72,73:[1,320],74:$Vm,75:$Vn,101:112,103:$VC,104:323,109:64,111:$VD,112:65,117:321},o($Vc1,[2,189],{110:$Vg1,111:$Vh1}),o($V_1,$VE1,{15:$VF1,21:$V72,37:$V72,119:$V72,120:$V72,95:$VY}),o($Vl1,[2,162],{42:$Vm1,113:$Vn1,114:$Vo1}),o($Vl1,[2,163],{42:$Vm1,113:$Vn1,114:$Vo1}),{37:[1,324],110:$Vg1,111:$Vh1},{37:[1,325],110:$Vg1,111:$Vh1},{41:[1,326]},{41:[1,327]},o($V42,[2,57]),{37:[1,328],41:[1,329]},o($Vi1,[2,103]),o($Vi1,[2,106]),o($Vc1,[2,197]),{14:[1,330]},o($Vp1,[2,168]),o($Vp1,[2,169]),o($Vp1,[2,170]),o($Vp1,[2,171]),{37:[1,331],42:[1,332]},o($Vc1,[2,200]),o($Vp1,[2,174]),{37:[1,333]},{14:$VN,17:71,36:$VO,42:$V7,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:334,111:$VP,112:166},o($VF,[2,6]),o($VF,[2,7]),{14:[1,335]},{14:$V1,17:71,18:336,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:337,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$V1,17:71,18:339,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:338,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:[1,341],48:340,101:342,102:42},o([42,75,93],$VG1,{14:$VH1}),{14:$Vb1,17:71,36:$V5,42:$V7,44:46,49:343,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$Vb1,17:71,36:$V5,42:$V7,44:46,49:344,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{45:[1,345]},{45:[1,346]},{45:[1,347]},{26:348,45:$V9},{37:[1,349],41:$V82},o($V42,[2,37]),{14:[1,351],42:[1,352]},{37:[1,353],41:$V82},{21:[1,354]},o($Vy1,[2,120],{110:$Vg1,111:$Vh1}),{96:[1,355]},{96:[1,356]},o($Vy1,[2,127],{94:[1,357],95:[1,358]}),{93:[1,359]},{21:[2,115],41:$V92},{37:[1,360],41:$V82},{21:[1,361]},{37:[1,362],41:$V82},{26:363,45:$V9},o($Vp1,$V12),{14:$VQ,34:300,46:[1,364],76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,130:365},o($Va2,[2,219]),{14:[1,366]},{45:[1,367]},{14:$VQ,34:300,46:[1,368],76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,130:365},{41:[1,370],46:[1,369]},o($Vb2,[2,227]),o($Vb2,[2,229],{94:[1,371]}),o($VH,[2,60]),{93:[1,372]},{14:[1,374],17:71,36:$VO,42:$V7,44:373,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:$VN,17:71,36:$VO,42:$V7,44:375,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},o($Vc2,$Vu1,{42:[1,376]}),o($Vc1,$Vd2,{42:[1,377]}),{21:[2,49]},{14:$VN,17:71,36:$VO,42:$V7,44:378,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},o($Ve2,[2,153],{95:[1,379]}),{14:$VN,17:71,36:$VO,42:$V7,44:242,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:[1,381],112:65,117:380},{111:[1,382],125:$VO1},o($Vc1,$VS1),{14:$Vr1,17:71,34:173,36:$V5,42:$V7,44:172,49:383,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT,101:112,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},o($Vc1,$Vf2),o($Vc2,$Vu1,{42:[1,384]}),o($Vc1,[2,208]),o($V_1,$VE1,{15:$VF1,21:$Vg2,37:$Vg2,119:$Vg2,120:$Vg2,95:$VY}),o($VT1,$VV1),{21:[2,51]},{21:[2,52]},{56:[1,385]},{56:[1,386]},{21:[2,55]},{14:$VN,17:71,36:$VO,42:$V7,44:231,51:387,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},o($V52,[2,206]),o($Vp1,[2,165]),{37:[1,388]},{52:$VM1,100:389},o($Vp1,[2,152]),{12:[1,390]},o($VG,[2,61],{62:[1,391]}),o($VG,[2,62],{62:[1,392]}),o($VH,[2,78]),o($VH,[2,79]),{37:[1,393]},{15:[1,394],94:$VX,95:$VY,105:$VZ,106:$V_,107:$V$,108:$V01},{94:$V71,107:$V81,108:$V91},{37:[1,395],119:$VI,120:$VJ},{37:[1,396],119:$VI,120:$VJ},{64:397,66:398,67:$Vh2,69:$Vi2},{64:401,66:398,67:$Vh2,69:$Vi2},{64:402,66:398,67:$Vh2,69:$Vi2},o($VH,[2,27]),{26:403,45:$V9},{14:$VQ,34:284,40:404,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},o($V42,[2,39]),{14:[1,405]},{21:[1,407],26:406,45:$V9},o($VH,[2,34]),o($Vy1,[2,121],{94:[1,409],95:[1,408]}),o($Vy1,[2,124],{94:[1,410]}),{14:$VN,17:71,36:$VO,42:$V7,44:411,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},{14:[1,413],73:[1,412]},o($Vy1,$V92),{21:[1,415],26:414,45:$V9},o($VH,[2,36]),{26:416,45:$V9},o($VH,[2,32]),{14:[1,418],21:[1,417]},o($Va2,[2,220]),{21:[1,419],95:[1,420]},{14:$Vw1,17:423,59:$Vj2,73:$Vl,74:$Vm,75:$Vn,90:421,91:422},{14:[1,426],21:[1,425]},{14:[1,428],21:[1,427]},{14:$VY1,132:429},{73:[1,430]},o($Va1,[2,144]),{37:[1,431],110:$Vg1,111:$Vh1},o([37,110,111,113,114],$VE1,{15:$VF1,42:[1,432],95:$VY}),o($Va1,[2,148],{110:$Vg1,111:$Vh1}),{14:[1,433]},{14:[1,434]},o($V42,[2,59],{110:$Vg1,111:$Vh1}),{14:$VN,17:71,36:$VO,42:$V7,44:435,56:$Vd,65:72,73:$Vl,74:$Vm,75:$Vn,101:112,103:$VC,104:67,109:64,111:$VP,112:65},o($Vc1,[2,207]),{14:$V62,17:71,36:$VO,42:$V7,44:242,56:$Vd,65:72,73:[1,436],74:$Vm,75:$Vn,101:112,103:$VC,104:323,109:64,111:$VD,112:65,117:321},{73:[1,437]},{37:[1,438],119:$VI,120:$VJ},{14:[1,439]},{14:[1,440]},{14:[1,441]},{37:[1,442],41:$V32},o($Vp1,[2,166]),o($Vp1,[2,181]),o($VF,[2,8]),{14:$V1,17:71,18:443,19:9,20:$V3,22:$V4,23:445,24:13,25:14,26:444,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$V1,17:71,18:446,19:9,20:$V3,22:$V4,23:448,24:13,25:14,26:447,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:$V1,17:71,18:449,19:9,20:$V3,22:$V4,23:12,24:13,25:14,26:450,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:33,36:$V5,39:$V6,42:$V7,43:$V8,44:46,45:$V9,47:23,48:24,49:25,50:26,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,65:72,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,101:41,102:42,103:$VC,104:67,109:64,111:$VD,112:65,115:43,116:$VE,117:45,122:62,123:66,124:69},{14:[1,451]},{21:[1,452]},{21:[1,453]},{46:[1,454],66:455,67:$Vh2,69:$Vi2},o($Vk2,[2,72]),{14:$Vw1,17:456,73:$Vl,74:$Vm,75:$Vn},{68:[1,457]},{46:[1,458],66:455,67:$Vh2,69:$Vi2},{46:[1,459],66:455,67:$Vh2,69:$Vi2},o($VH,[2,30]),o($V42,[2,38]),o($V42,[2,40]),o($VH,[2,28]),o($VH,[2,33]),{73:[1,460]},{45:[1,461]},{45:[1,462]},o($Vy1,[2,128],{110:$Vg1,111:$Vh1}),{96:[1,463]},{96:[1,464]},o($VH,[2,29]),o($VH,[2,35]),o($VH,[2,31]),o($VH,[2,217]),{21:[1,465]},o($Va2,[2,221]),{73:[1,466]},{41:[1,468],46:[1,467]},o($Vb2,[2,109]),o($Vb2,[2,111]),o($Vb2,[2,112]),o($VH,[2,223]),{21:[1,469]},o($VH,[2,225]),{21:[1,470]},o($Vb2,[2,228]),o($Vb2,[2,230]),o($Vp1,[2,149]),{103:[1,471]},o($Vc1,[2,192]),o($Vc1,[2,193]),{96:[1,472],110:$Vg1,111:$Vh1},o($Vc2,$Vu1,{42:[1,473]}),o($Vc1,$Vd2),o($Vc1,$Vf2),o($Vc1,[2,186]),{37:[1,474]},{37:[1,475]},{21:[2,56]},o($VH,[2,65]),o($VH,[2,66]),o($VH,[2,68]),o($VH,[2,63]),o($VH,[2,64]),o($VH,[2,67]),o($VH,[2,80]),o($VH,[2,81]),{94:$V22},o($VH,[2,82]),o($VH,[2,83]),o($VH,[2,69]),o($Vk2,[2,73]),{68:[1,476]},o($Vk2,[2,76],{18:6,19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,47:23,48:24,49:25,50:26,34:33,101:41,102:42,115:43,117:45,44:46,122:62,109:64,112:65,123:66,104:67,124:69,17:71,65:72,7:477,14:$V1,20:$V3,22:$V4,36:$V5,39:$V6,42:$V7,43:$V8,45:$V9,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,103:$VC,111:$VD,116:$VE}),o($VH,[2,70]),o($VH,[2,71]),{96:[1,478]},{14:$Vw1,17:480,45:$Vl2,73:$Vl,74:$Vm,75:$Vn,98:479},{14:$Vw1,17:480,45:$Vl2,73:$Vl,74:$Vm,75:$Vn,98:482},o($Vy1,[2,129],{94:[1,483]}),o($Vy1,[2,130],{94:[1,484]}),o($VH,[2,218]),{96:[1,485]},{21:[2,116]},{14:$Vw1,17:423,59:$Vj2,73:$Vl,74:$Vm,75:$Vn,91:486},o($VH,[2,224]),o($VH,[2,226]),{36:[1,487]},o($Ve2,[2,154]),{14:[1,488]},{21:[2,53]},{21:[2,54]},o($Vk2,[2,74],{18:6,19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,47:23,48:24,49:25,50:26,34:33,101:41,102:42,115:43,117:45,44:46,122:62,109:64,112:65,123:66,104:67,124:69,17:71,65:72,7:489,14:$V1,20:$V3,22:$V4,36:$V5,39:$V6,42:$V7,43:$V8,45:$V9,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,103:$VC,111:$VD,116:$VE}),o($Vk2,[2,77],{19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,47:23,48:24,49:25,50:26,34:33,101:41,102:42,115:43,117:45,44:46,122:62,109:64,112:65,123:66,104:67,124:69,17:71,65:72,18:81,14:$V1,20:$V3,22:$V4,36:$V5,39:$V6,42:$V7,43:$V8,45:$V9,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,103:$VC,111:$VD,116:$VE}),o($Vy1,[2,122],{94:[1,490]}),{41:$Vm2,46:[1,491]},o($Vb2,[2,133]),{14:$Vw1,17:480,45:$Vn2,73:$Vl,74:$Vm,75:$Vn,97:494,98:495,99:493},{41:$Vm2,46:[1,497]},{45:[1,498]},{45:[1,499]},{21:[1,500]},o($Vb2,[2,110]),{14:$VQ,34:501,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$VR,88:$VS,89:$VT},o($Vc1,[2,209]),o($Vk2,[2,75],{19:9,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,47:23,48:24,49:25,50:26,34:33,101:41,102:42,115:43,117:45,44:46,122:62,109:64,112:65,123:66,104:67,124:69,17:71,65:72,18:81,14:$V1,20:$V3,22:$V4,36:$V5,39:$V6,42:$V7,43:$V8,45:$V9,52:$Va,53:$Vb,54:$Vc,56:$Vd,58:$Ve,60:$Vf,61:$Vg,63:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,103:$VC,111:$VD,116:$VE}),{45:[1,502]},o($Vy1,[2,125]),{14:$Vw1,17:503,73:$Vl,74:$Vm,75:$Vn},{41:$Vo2,46:[1,504]},{41:$Vp2,46:[1,506]},{41:$Vm2,46:[2,137]},{14:$Vw1,17:480,45:$Vn2,73:$Vl,74:$Vm,75:$Vn,97:494,98:495,99:508},o($Vy1,[2,126]),{14:$Vw1,17:480,45:$Vl2,73:$Vl,74:$Vm,75:$Vn,98:509},{14:$Vw1,17:480,45:$Vl2,73:$Vl,74:$Vm,75:$Vn,98:510},o($Va2,[2,222]),{37:[1,511],42:[1,512]},{45:[1,514],97:513},o($Vb2,[2,136]),o($Vb2,[2,134]),{14:$Vw1,17:480,45:$Vl2,73:$Vl,74:$Vm,75:$Vn,98:515},o($Vb2,[2,135]),{45:[1,516]},{41:$Vo2,46:[1,517]},{41:$Vm2,46:[1,518]},{41:$Vm2,46:[1,519]},{37:[1,520]},{37:[1,521]},{41:$Vp2,46:[1,522]},{14:$Vw1,17:480,45:$Vl2,73:$Vl,74:$Vm,75:$Vn,98:495,99:523},{41:$Vm2,46:[2,138]},{14:$Vw1,17:480,45:$Vl2,73:$Vl,74:$Vm,75:$Vn,98:495,99:524},o($Vb2,$Vq2),o($Vy1,[2,131]),o($Vy1,[2,132]),o($Vp1,[2,150]),{37:[1,525]},o($Vy1,[2,123]),{41:$Vo2,46:[1,526]},{41:$Vo2,46:[1,527]},o($Vp1,[2,151]),o($Vb2,$Vq2),o($Vb2,[2,140])],
defaultActions: {78:[2,1],230:[2,50],312:[2,49],324:[2,51],325:[2,52],328:[2,55],442:[2,56],467:[2,116],474:[2,53],475:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var escopoAtual = 0;
  var tabelaSimbolos = [];
  var tabelaDefinicoes = {};
  var temp = [];
  var tac = [];
  var erros = [];
  var arvores = [];
  var comment_flag = false;

  class AST {
      constructor(root) {
          this.root = root;
      }

      postorder(node) {
          if (node !== null) {
              this.postorder(node.leftChild);
              this.postorder(node.rightChild);
              console.log(node.type);
          }
      }

      inorder(node) {
          if (node !== null) {
              this.inorder(node.leftChild);
              tac.push(node.type);
              this.inorder(node.rightChild);
          }
      }
  }

  class Node {
      constructor(type, leftChild = null, rightChild = null) {
          this.type = type;
          this.leftChild = leftChild;
          this.rightChild = rightChild;
      }
  }

  function printPosOrder(node, deep = 0) {
      let indent = "    ".repeat(deep);  // Ajusta a indentação para cada nível
      let treeLine = indent + "|";
      
      if (node !== null && node !== undefined) {
          // Exibe o tipo do nó atual
          console.log(treeLine + "- " + (node.type || "undefined"));
          
          // Se houver filhos, imprimimos as relações
          if (node.leftChild !== null && node.leftChild !== undefined || 
              node.rightChild !== null && node.rightChild !== undefined) {
              
              if (node.leftChild !== null && node.leftChild !== undefined) {
                  console.log(treeLine + "   /         \\");
                  printPosOrder(node.leftChild, deep + 1); // Desenha o filho à esquerda
              }

              if (node.rightChild !== null && node.rightChild !== undefined) {
                  console.log(treeLine + "   \\         /");
                  printPosOrder(node.rightChild, deep + 1); // Desenha o filho à direita
              }
          }
      } else {
          console.log(treeLine + "- " + "undefined");
      }
  }

  function criarVariavel(tipo, nome, valor) {
      if (typeof valor === 'string') {
          const variavelExistente = tabelaSimbolos.find(dictAtual => dictAtual.id === valor);
          if (variavelExistente) {
              tabelaSimbolos.push({ tipo, id: nome, val: variavelExistente.val, escopo: escopoAtual });
          }
      } else {
          tabelaSimbolos.push({ tipo, id: nome, val: valor, escopo: escopoAtual });
      }
  }

  function verificaVariavel(id) {
      const variavel = tabelaSimbolos.find(variavel => variavel.id === id);
      if (!variavel) {
          erros.push("Variável '" + id + "' não declarada");
      }
  }

  function verificaTipos(varOne, varTwo) {
      if (typeof varOne === typeof varTwo) {
          return true;
      } else {
          erros.push(`${varOne} é de tipo diferente de ${varTwo}`);
      }
  }

  function criaTAC(temp, var1, var2, op) {
      const code = `${temp} = ${var1} ${op} ${var2}`;
      tac.push(code);
  }

  function criaTACIf(condicional, l) {
      tac.push(`if ${condicional} goto ${l}`);
  }

  function criaTACUnaryOp(op, var1, temp) {
      const code = `${temp} = ${op}${var1}`;
      tac.push(code);
  }

  function printaTAC() {
      tac.forEach((line, index) => {
          console.log(`${index}: ${line}`);
      });
  }

  function criaTemp() {
      return `temp${Math.floor(Math.random() * 1000)}`;
  }

  function criaNode(type, left, right) {
      return new Node(type, left, right);
  }
  
  function definirConstante(nome, valor) {
      tabelaDefinicoes[nome] = valor;
  }
  
  function obterValorDefinicao(nome) {
      return tabelaDefinicoes[nome];
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar comentários de linha */
break;
case 1:/* Ignorar comentários de bloco */
break;
case 2:/* Ignorar espaços em branco */
break;
case 3:console.log('Token INCLUDE'); return 9;
break;
case 4:console.log('Token DEFINE'); return 16;
break;
case 5:console.log('Token STDIO_H'); return 11;
break;
case 6:console.log('Token STDLIB_H'); return 13;
break;
case 7:console.log('Token MALLOC'); return 52;
break;
case 8:console.log('Token FREE'); return 53;
break;
case 9:console.log('Token SIZEOF'); return 103;
break;
case 10:console.log('Token VOID'); return 39;
break;
case 11:console.log('Token RETURN'); return 43;
break;
case 12:console.log('Token PRINTF'); return 58;
break;
case 13:console.log('Token SCANF'); return 54;
break;
case 14:console.log('Token MAIN'); return 35;
break;
case 15:console.log('Token INT'); return 76;
break;
case 16:console.log('Token DOUBLE'); return 77;
break;
case 17:console.log('Token FLOAT'); return 78;
break;
case 18:console.log('Token CHAR'); return 79;
break;
case 19:console.log('Token STRUCT'); return 87;
break;
case 20:console.log('Token UNION'); return 88;
break;
case 21:console.log('Token ENUM'); return 89;
break;
case 22:console.log('Token TYPEDEF'); return 60;
break;
case 23:console.log('Token UNSIGNED'); return 80;
break;
case 24:console.log('Token SIGNED'); return 81;
break;
case 25:console.log('Token CONST'); return 84;
break;
case 26:console.log('Token VOLATILE'); return 85;
break;
case 27:console.log('Token REGISTER'); return 86;
break;
case 28:console.log('Token LONG'); return 82;
break;
case 29:console.log('Token SHORT'); return 83;
break;
case 30:console.log('Token ADD_ASSIGN'); return 107;
break;
case 31:console.log('Token SUB_ASSIGN'); return 108;
break;
case 32:console.log('Token INC'); return 105;
break;
case 33:console.log('Token DEC'); return 106;
break;
case 34:console.log('Token MUL'); return 42;
break;
case 35:console.log('Token MUL_ASSIGN'); return 'MUL_ASSIGN';
break;
case 36:console.log('Token DIV'); return 113;
break;
case 37:console.log('Token DIV_ASSIGN'); return 'DIV_ASSIGN';
break;
case 38:console.log('Token MOD'); return 114;
break;
case 39:console.log('Token MOD_ASSIGN'); return 'MOD_ASSIGN';
break;
case 40:console.log('Token SUM'); return 110;
break;
case 41:console.log('Token SUB'); return 111;
break;
case 42:console.log('Token COMMA'); return 41;
break;
case 43:console.log('Token SEMICOLON'); return 21;
break;
case 44:console.log('Token COLON'); return 68;
break;
case 45:console.log('Token DOT'); return 15;
break;
case 46:console.log('Token LPAREN'); return 36;
break;
case 47:console.log('Token RPAREN'); return 37;
break;
case 48:console.log('Token LBRACE'); return 45;
break;
case 49:console.log('Token RBRACE'); return 46;
break;
case 50:console.log('Token LBRACKET'); return 95;
break;
case 51:console.log('Token RBRACKET'); return 96;
break;
case 52:console.log('Token LE'); return 126;
break;
case 53:console.log('Token GE'); return 127;
break;
case 54:console.log('Token LT'); return 10;
break;
case 55:console.log('Token GT'); return 12;
break;
case 56:console.log('Token NE'); return 128;
break;
case 57:console.log('Token EQ'); return 121;
break;
case 58:console.log('Token ASSIGN'); return 94;
break;
case 59:console.log('Token AND'); return 119;
break;
case 60:console.log('Token OR'); return 120;
break;
case 61:console.log('Token NOT'); return 116;
break;
case 62:console.log('Token BITAND'); return 56;
break;
case 63:console.log('Token IF'); return 61;
break;
case 64:console.log('Token SWITCH'); return 63;
break;
case 65:console.log('Token CASE'); return 67;
break;
case 66:console.log('Token BREAK'); return 20;
break;
case 67:console.log('Token CONTINUE'); return 22;
break;
case 68:console.log('Token DEFAULT'); return 69;
break;
case 69:console.log('Token ELSE'); return 62;
break;
case 70:console.log('Token WHILE'); return 70;
break;
case 71:console.log('Token FOR'); return 71;
break;
case 72:console.log('Token DO'); return 72;
break;
case 73:console.log('Token NULL'); return 125;
break;
case 74:console.log('Token FORMAT_D'); return 57;
break;
case 75:console.log('Token STRING_LIT:', yy_.yytext); return 59;
break;
case 76:console.log('Token IDF'); return 14;
break;
case 77:console.log('Token F_LIT'); return 74;
break;
case 78:console.log('Token INT_LIT'); return 73;
break;
case 79:console.log('Token CHAR_LIT'); return 75;
break;
case 80:console.log('Token HASH'); return '#';
break;
case 81:console.log('Erro léxico: caractere [', yy_.yytext, '] não reconhecido.');
break;
case 82:console.log('Token EOF'); return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\\\*[^*]*\\\*+([^/*][^*]*\\\*+)*\/)/,/^(?:\s+)/,/^(?:#include\b)/,/^(?:#define\b)/,/^(?:stdio\.h\b)/,/^(?:stdlib\.h\b)/,/^(?:malloc\b)/,/^(?:free\b)/,/^(?:sizeof\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:printf\b)/,/^(?:scanf\b)/,/^(?:main\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:struct\b)/,/^(?:union\b)/,/^(?:enum\b)/,/^(?:typedef\b)/,/^(?:unsigned\b)/,/^(?:signed\b)/,/^(?:const\b)/,/^(?:volatile\b)/,/^(?:register\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\*=)/,/^(?:\/)/,/^(?:\/=)/,/^(?:%)/,/^(?:%=)/,/^(?:\+)/,/^(?:-)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:NULL\b)/,/^(?:%d\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[0-9]*\.[0-9]+([eE][+-][0-9]+)?)/,/^(?:[0-9]+)/,/^(?:'\[a-zA-Z0-9\]')/,/^(?:#)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compiler;
exports.Parser = compiler.Parser;
exports.parse = function () { return compiler.parse.apply(compiler, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}